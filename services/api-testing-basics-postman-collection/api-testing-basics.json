{
  "name": "api-testing-basics",
  "version": "1.0.0",
  "baseUrl": "",
  "authentication": {},
  "endpoints": [
    {
      "name": "pm.test",
      "path": "/https://postman-echo.com/get?foo1=bar1&foo2=bar2",
      "method": "GET",
      "description": "This request demonstrates how to work with the `pm` API. Send the request to view the results of the sample tests in the \"Test Results\" tab in the response viewer.\n\n### Working with the `pm` API\n\nUse the `pm` API to write your test under the **Tests** tab in Postman. The `pm.test()` method accepts two parameters -\n\nThe first parameter is the name of the test, so it's important to give your test a descriptive name to provide more information in case the test fails.\n\nThe second parameter is a function whereby if any assertions within your function fail, then the test will fail.\n\n```\npm.test(\"Name of the second test\", function () {\n    // make as many assertions as you'd like as part of this test\n    // if any assertion throws an error, this test will fail\n    pm.response.to.have.status(200);\n    pm.response.to.be.ok;\n    pm.response.to.be.json;\n});\n\n```",
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "foo1",
            "description": "",
            "required": true,
            "type": "string",
            "default": "bar1"
          },
          {
            "name": "foo2",
            "description": "",
            "required": true,
            "type": "string",
            "default": "bar2"
          }
        ],
        "headers": [],
        "body": null
      },
      "responses": [],
      "rateLimit": null,
      "authentication": null
    },
    {
      "name": "pm.expect and pm.response",
      "path": "/https://postman-echo.com/get?foo1=bar1&foo2=bar2",
      "method": "GET",
      "description": "This request demonstrates how to make assertions with `pm.response()` or `pm.expect()` within the second parameter of the `pm.test()` function.\n\nSend the request to view the results of the sample tests in the \"Test Results\" tab in the response viewer.\n\n### Working with the `pm.expect()` and `pm.response()` functions\n\nThe `pm.expect()` generic assertion function relies on [Chai.js](https://www.chaijs.com/), a BDD / TDD assertion library for node.\n\n```\npm.test(\"Environment to be production\", function () {\n  pm.expect(pm.environment.get(\"env\")).to.equal(\"production\");\n});\n\n```\n\nYou can also use a second optional parameter with the `pm.expect()` function to create a custom error message.\n\n```\npm.test(\"Using a custom error message\", function () {\n    pm.expect(false, 'nooo why fail??').to.be.ok;\n});\n\n```\n\nThe `pm.response()` method uses `pm.expect()` under the hood.\n\nUsing `pm.response()` as your base assertion allows you to receive more specific error messages when debugging. Here are some [`pm.response()` methods](https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference#response-assertion-api-in-test-scripts). Review the error messages under the \"Test Results\" tab to see the difference.",
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "foo1",
            "description": "",
            "required": true,
            "type": "string",
            "default": "bar1"
          },
          {
            "name": "foo2",
            "description": "",
            "required": true,
            "type": "string",
            "default": "bar2"
          }
        ],
        "headers": [],
        "body": null
      },
      "responses": [],
      "rateLimit": null,
      "authentication": null
    },
    {
      "name": "Response time",
      "path": "/https://postman-echo.com/put",
      "method": "PUT",
      "description": "This test is to validate the response time. This Snippet is also available on the right sidebar under `Response time is less than 200ms`.",
      "parameters": {
        "path": [],
        "query": [],
        "headers": [],
        "body": {
          "type": "raw",
          "description": "",
          "content": "This is expected to be sent back as part of response body.",
          "contentType": "text/plain"
        }
      },
      "responses": [],
      "rateLimit": null,
      "authentication": null
    },
    {
      "name": "Data type",
      "path": "/https://postman-echo.com/patch",
      "method": "PATCH",
      "description": "This test is to validate the content type of the returned content. This Snippet is also available on the right sidebar under `Response headers: Content-Type header check`.",
      "parameters": {
        "path": [],
        "query": [],
        "headers": [],
        "body": {
          "type": "raw",
          "description": "",
          "content": "This is expected to be sent back as part of response body.",
          "contentType": "text/plain"
        }
      },
      "responses": [],
      "rateLimit": null,
      "authentication": null
    },
    {
      "name": "Functional",
      "path": "/https://postman-echo.com/post",
      "method": "POST",
      "description": "This test is written to validate the server performed a function as expected.",
      "parameters": {
        "path": [],
        "query": [],
        "headers": [],
        "body": {
          "type": "urlencoded",
          "description": "",
          "fields": [
            {
              "name": "someHash",
              "value": "7654321",
              "description": ""
            },
            {
              "name": "secondHash",
              "value": "987654321asdfgh",
              "description": ""
            }
          ]
        }
      },
      "responses": [],
      "rateLimit": null,
      "authentication": null
    },
    {
      "name": "Functional2",
      "path": "/https://postman-echo.com/delete",
      "method": "DELETE",
      "description": "This test is written to demonstrate how to bundle several assertions within a single test.",
      "parameters": {
        "path": [],
        "query": [],
        "headers": [],
        "body": {
          "type": "raw",
          "description": "",
          "content": "This is expected to be sent back as part of response body.",
          "contentType": "text/plain"
        }
      },
      "responses": [],
      "rateLimit": null,
      "authentication": null
    },
    {
      "name": "JSON schema v4 validation",
      "path": "/https://postman-echo.com/get?foo1=bar1&foo2=bar2",
      "method": "GET",
      "description": "This test is written to validate that response payloads returned from the server are well-formed. It uses the [Tiny Validator for JSON Schema v4](http://geraintluff.github.io/tv4/).\n\nThe Postman sandbox offers a built-in tv4 validator to simplify your assertions. Use [JSON-schema](http://json-schema.org/) [draft v4](http://json-schema.org/latest/json-schema-core.html) to validate simple values and complex objects using a rich [validation vocabulary](http://json-schema.org/latest/json-schema-validation.html) ([examples](http://json-schema.org/examples.html)).",
      "parameters": {
        "path": [],
        "query": [
          {
            "name": "foo1",
            "description": "",
            "required": true,
            "type": "string",
            "default": "bar1"
          },
          {
            "name": "foo2",
            "description": "",
            "required": true,
            "type": "string",
            "default": "bar2"
          }
        ],
        "headers": [],
        "body": null
      },
      "responses": [],
      "rateLimit": null,
      "authentication": null
    },
    {
      "name": "SQL injection security check",
      "path": "/https://postman-echo.com/post",
      "method": "POST",
      "description": "This test checks if it is possible to inject malicious strings as a request parameter. If your server is not handling user input properly, these strings can be interpreted by your server as SQL commands that result in leaking sensitive information or general mayhem.",
      "parameters": {
        "path": [],
        "query": [],
        "headers": [],
        "body": {
          "type": "urlencoded",
          "description": "",
          "fields": [
            {
              "name": "customerName",
              "value": "' or '1'='1",
              "description": " String query = \"SELECT account_balance FROM user_data WHERE user_name = \"\n   + request.getParameter(\"customerName\");"
            },
            {
              "name": "anotherAttack",
              "value": "' or 1=1; drop table myTable; --",
              "description": "Probably best not to do this one in production, or at all, except for demonstration purposes"
            }
          ]
        }
      },
      "responses": [],
      "rateLimit": null,
      "authentication": null
    }
  ],
  "webhooks": [],
  "dependencies": [],
  "capabilities": [],
  "metadata": {
    "description": "# 🧪 Get started here\n\nPostman's powerful scripting feature helps you to write a range of API tests in JavaScript, including integration, regression, and contract tests.\n\nThis template demonstrates how to work with the Postman basic test syntax to test a single HTTP API request.\n\n## 🔖 How to use this template?\n\n#### Step 1: Send requests\n\nSend the sample requests and view the response and test results.\n\n#### Step 2: Update the sample request URL\n\nReplace the sample request URLs with your desired API endpoints.\n\n#### Step 3: Customize tests\n\nCustomize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n## 💪 Quick tips for writing tests\n\n- Organize your test scenarios by grouping your requests in [collections](https://www.getpostman.com/docs/v6/postman/collections/intro_to_collections) and [folders](https://www.getpostman.com/docs/v6/postman/collections/managing_collections#adding-folders), and naming them descriptively\n- Document your API’s requirements using [markdown in the descriptions](https://www.getpostman.com/docs/v6/postman/collections/using_markdown_for_descriptions)\n- Use [variables](https://www.getpostman.com/docs/v6/postman/environments_and_globals/variables) to simulate more sophisticated user flows\n- Common tests that will be run after every request can be added to collection-level tests or folder-level tests\n    \n\n## ℹ️ Resources\n\n- [Test scripts](https://www.getpostman.com/docs/v6/postman/scripts/test_scripts)\n- [Test examples](https://www.getpostman.com/docs/v6/postman/scripts/test_examples)\n- [Quick reference guide](https://community.getpostman.com/t/the-postman-cheatsheet-quick-reference-guide/1054)\n- [Examples and guides](https://github.com/DannyDainton/All-Things-Postman)\n- [Writing tests in Postman](http://blog.getpostman.com/2017/10/25/writing-tests-in-postman/)\n- [API testing tips from a Postman professional](http://blog.getpostman.com/2017/07/28/api-testing-tips-from-a-postman-professional/)",
    "postmanId": "1edf7c37-5f65-48d9-b7cf-4d10e5e1b7bc",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "exporterId": "43116137",
    "variables": {}
  }
}