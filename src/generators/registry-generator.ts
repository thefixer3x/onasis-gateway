import fs from 'fs';
import path from 'path';
import { GeneratedAdapter } from '../types/mcp.js';

export class RegistryGenerator {
  private adaptersDir: string;
  private outputFile: string;

  constructor(adaptersDir: string, outputFile: string) {
    this.adaptersDir = adaptersDir;
    this.outputFile = outputFile;
  }

  async generateRegistry(adapters: GeneratedAdapter[]): Promise<void> {
    const registryCode = this.generateRegistryCode(adapters);
    
    // Ensure output directory exists
    const outputDir = path.dirname(this.outputFile);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    fs.writeFileSync(this.outputFile, registryCode);
    console.log(`âœ… Generated adapter registry: ${this.outputFile}`);
  }

  private generateRegistryCode(adapters: GeneratedAdapter[]): string {
    const imports = adapters.map(adapter => 
      `import ${adapter.className}Adapter from './generated/${adapter.name}.js';`
    ).join('\n');

    const adapterMap = adapters.map(adapter => 
      `  '${adapter.name}': ${adapter.className}Adapter,`
    ).join('\n');

    const adapterMetadata = adapters.map(adapter => ({
      name: adapter.name,
      className: adapter.className,
      tools: adapter.tools.map(t => t.name),
      authType: adapter.authType,
      baseUrl: adapter.baseUrl,
      dependencies: adapter.dependencies
    }));

    return `/**
 * Auto-generated MCP Adapter Registry
 * This file is automatically generated - do not edit manually
 */

import { MCPAdapter } from '../types/mcp.js';

${imports}

export interface AdapterConstructor {
  new (): MCPAdapter;
}

export const ADAPTER_REGISTRY: Record<string, AdapterConstructor> = {
${adapterMap}
};

export const ADAPTER_METADATA = ${JSON.stringify(adapterMetadata, null, 2)};

export function getAdapter(name: string): AdapterConstructor | undefined {
  return ADAPTER_REGISTRY[name];
}

export function listAdapters(): string[] {
  return Object.keys(ADAPTER_REGISTRY);
}

export function getAdapterMetadata(name: string) {
  return ADAPTER_METADATA.find(adapter => adapter.name === name);
}

export function getAllAdapterMetadata() {
  return ADAPTER_METADATA;
}

export async function createAdapterInstance(name: string): Promise<MCPAdapter | null> {
  const AdapterClass = getAdapter(name);
  if (!AdapterClass) {
    return null;
  }
  
  return new AdapterClass();
}

export default {
  ADAPTER_REGISTRY,
  ADAPTER_METADATA,
  getAdapter,
  listAdapters,
  getAdapterMetadata,
  getAllAdapterMetadata,
  createAdapterInstance
};`;
  }
}

export default RegistryGenerator;
